" ---------------------------------------------------------
" BASIC SETTINGS
" ---------------------------------------------------------
:set nocompatible " make incompatible to vi

let mapleader=","

compiler ruby " Enable compiler support for ruby

:set wrap " wrap lines
:set linebreak
:set nolist  " list disables linebreak

let g:netrw_cursorline = 0

set hidden " allow unsaved background buffers and remember marks/undo for them
set number " show line numbers
set history=10000 " remember more commands and search history

"display tabs and trailing spaces
set list
set listchars=tab:▷⋅,trail:⋅,nbsp:⋅

" tab size
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set autoindent
set laststatus=2 " Enables the status line at the bottom of Vim
set showmatch
set incsearch
set hlsearch

set ignorecase smartcase " make searches case-sensitive only if they contain upper-case characters
set cursorline " highlight current line

set cmdheight=2
set switchbuf=useopen
set numberwidth=5
set showtabline=2

set winwidth=84
" We have to have a winheight bigger than we want to set winminheight. But if
" we set winheight to be huge before winminheight, the winminheight set will
" fail.
set winheight=10
set winminheight=10
set winheight=999

set shell=zsh " use ZSH
set grepprg=ack " use Ack instead of grep

set scrolloff=3 " keep more context when scrolling off the end of a buffer
set backspace=indent,eol,start " allow backspacing over everything in insert mode
set showcmd " display incomplete commands

syntax on " Enable highlighting for syntax

filetype plugin indent on " load indent files, to automatically do language-dependent indenting.

set wildmode=list:longest,full " use emacs-style tab completion when selecting files, etc
set wildmenu " make tab completion for files/buffers act like bash

"set noesckeys " DO NOT ENABLE breaks normal vim's arrow keys in insert mode

:set vb " no annoying sound on errors
set timeoutlen=500 " Don't wait so long for the next keypress (particularly in leader situations)
set tags=./tags; " Set the tag file search order

" no need for backups with git/svn/etc.
set nobackup
set nowritebackup
set noswapfile

" ---------------------------------------------------------
" KEY MAPS
" ---------------------------------------------------------
" Substitute :Q for :q to save retypes
command! Q q
" Substitute ; for : to save keystrokes
nnoremap ; :
" Use leader+leader as :
nnoremap <Leader><Leader> :

" ctrl+s save (insert & normal mode)
map <C-s> <esc>:w<CR>
imap <C-s> <esc>:w<CR>

" type jj quickly to exit insert mode
imap jj <Esc>
" ctrl+l goto end of line insert mode
imap <C-l> <esc>$a

" jumps to the next line of long lines of text, useful for moving around
map j gj
map k gk

" if a file needs sudo access to write, make it so
cnoreabbrev <expr> w!!
                \((getcmdtype() == ':' && getcmdline() == 'w!!')
                \?('!sudo tee % >/dev/null'):('w!!'))

nmap <silent> ,/ :nohlsearch<CR> " clear search buffer

" --------------------------------------------------------
" LEADER KEYS
" ---------------------------------------------------------
" stop using ctrl+something, bad habit

" notes
"<leader>gb maps to :Gblame<CR>
"<leader>gs maps to :Gstatus<CR>
"<leader>gd maps to :Gdiff<CR>
"<leader>gl maps to :Glog<CR>
"<leader>gc maps to :Gcommit<CR>
"<leader>gp maps to :Git push<CR>

" save
map <leader>s :w!<CR>
map <leader>w :w!<CR>
" save and close
map <leader>W :wq!<CR>
" close current window
map <leader>q :q!<CR>
" close all windows
map <leader>Q :qa!<CR>

" open files in directory of current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%
map <leader>v :view %%

" ctrl+p rails shortcuts
map <leader>ec :CtrlP app/controllers<cr>
map <leader>ea :CtrlP app<cr>
map <leader>em :CtrlP app/models<cr>
map <leader>ev :CtrlP app/views<cr>

" navigate windows
" move to the window left
" move to the window below
" move to the window above
" move to the window right
map <Leader>h <C-W>h
map <Leader>j <C-W>j
map <Leader>k <C-W>k
map <Leader>l <C-W>l

" ---------------------------------------------------------
" ACK Settings
" ---------------------------------------------------------
map <leader>a :Ack<space>

" ---------------------------------------------------------
" BufferGator Settings
" ---------------------------------------------------------
map <leader>b :BuffergatorToggle<cr> " toggle view
let g:buffergator_suppress_keymaps = 1 " suppress BufferGator default mapping

" ---------------------------------------------------------
" CTRL-P Settings
" ---------------------------------------------------------
map <leader>t :CtrlPMixed<ENTER>
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_show_hidden = 1 " make dotfiles searchable

" Exclude content from searching
set wildignore+=*/vendor/bundle/*
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.hg$\|\.svn$\|\.yardoc$',
  \ 'file': '\.exe$\|\.so$\|\.dat$\|\.gitkeep$\|\Gemfile.lock$\|\.DS_Store',
  \ }

" https://github.com/kien/ctrlp.vim/issues/160 selections open in new tab
let g:ctrlp_prompt_mappings = {
  \ 'AcceptSelection("e")': ['<c-t>'],
  \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
  \ }

" ---------------------------------------------------------
" CUSTOM AUTOCMDS
" ---------------------------------------------------------
augroup vimrcEx
  " Clear all autocmds in the group
  autocmd!
  autocmd FileType text setlocal textwidth=78

  " Jump to last cursor position unless it's invalid or in an event handler
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  "for ruby, autoindent with two spaces, always expand tabs
  autocmd FileType ruby,haml,eruby,yaml,html,javascript,sass,cucumber,haml,coffee set ai sw=2 sts=2 et
  autocmd FileType python set sw=4 sts=4 et

  "don't remember file position for git commits
  autocmd FileType gitcommit call setpos('.', [0, 1, 1, 0])

  autocmd! BufRead,BufNewFile *.sass setfiletype sass
  autocmd! BufRead,BufNewFile *.lock setfiletype ruby
  autocmd! BufRead,BufNewFile *.pill setfiletype ruby
  autocmd! BufRead,BufNewFile *.json_builder setfiletype ruby

  "for haml_coffee_assets ~ https://github.com/netzpirat/haml_coffee_assets
  autocmd! BufRead,BufNewFile *.hamlc setfiletype haml

  autocmd BufNewFile,BufRead *.mobile.erb let b:eruby_subtype='html'
  autocmd BufNewFile,BufRead *.mobile.erb set filetype=eruby

  " Set up some useful Rails.vim bindings for working with Backbone.js
  autocmd User Rails Rnavcommand template    app/assets/templates               -glob=**/*  -suffix=.jst.ejs
  autocmd User Rails Rnavcommand jmodel      app/assets/javascripts/models      -glob=**/*  -suffix=.coffee
  autocmd User Rails Rnavcommand jview       app/assets/javascripts/views       -glob=**/*  -suffix=.coffee
  autocmd User Rails Rnavcommand jcollection app/assets/javascripts/collections -glob=**/*  -suffix=.coffee
  autocmd User Rails Rnavcommand jrouter     app/assets/javascripts/routers     -glob=**/*  -suffix=.coffee
  autocmd User Rails Rnavcommand jspec       spec/javascripts                   -glob=**/*  -suffix=.coffee

  autocmd BufRead *.mkd  set ai formatoptions=tcroqn2 comments=n:&gt;
  autocmd BufRead *.markdown  set ai formatoptions=tcroqn2 comments=n:&gt;

  autocmd! BufRead,BufNewFile *.conf setfiletype nginx

  autocmd BufWritePre *.rb :%s/\s\+$//e " Remove trailing whitespace on save for ruby files.
  autocmd filetype svn,*commit* setlocal spell "spell check when writing commit logs
augroup END

" ---------------------------------------------------------
" STATUS LINE
" ---------------------------------------------------------
:set statusline=%<%f\ (%{&ft})\ %{fugitive#statusline()}\ %-4(%m%)%=%-19(%3l,%02c%03V%)

" ---------------------------------------------------------
" MULTIPURPOSE TAB KEY
" ---------------------------------------------------------
" Indent if we're at the beginning of a line. Else, do completion.
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" ---------------------------------------------------------
" RENAME CURRENT FILE
" ---------------------------------------------------------
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <leader>r :call RenameFile()<cr>

" ---------------------------------------------------------
" stop indenting when pasting to vim in osx
" ---------------------------------------------------------
if &term =~ "xterm.*"
    let &t_ti = &t_ti . "\e[?2004h"
    let &t_te = "\e[?2004l" . &t_te
    function XTermPasteBegin(ret)
        set pastetoggle=<Esc>[201~
        set paste
        return a:ret
    endfunction
    map <expr> <Esc>[200~ XTermPasteBegin("i")
    imap <expr> <Esc>[200~ XTermPasteBegin("")
    cmap <Esc>[200~ <nop>
    cmap <Esc>[201~ <nop>
endif

" ---------------------------------------------------------
" COLOR
" ---------------------------------------------------------
:set t_Co=256
:set background=dark 
let g:Powerline_symbols='fancy'

if has("gui_running")
  set lines=90 columns=200
  set mouse=a "get full mouse support
  :color solarized
  :set guifont=Menlo:h13
else
  :color grb256
  :set guifont=Menlo:h12
endif
